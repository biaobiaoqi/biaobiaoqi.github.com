<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 操作系统 | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.me/tags/cao-zuo-xi-tong/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.me/"/>
  <updated>2013-11-07T02:33:21+08:00</updated>
  <id>http://biaobiaoqi.me/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[重置MBP的NVRAM]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/10/07/reset-nvram/"/>
    <updated>2013-10-07T23:25:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/10/07/reset-nvram</id>
    <content type="html"><![CDATA[<h3>遇到问题</h3>

<p>今天的中国好声音决赛之夜，我的Mac突然无法发出声响了=(，在此之前，刚看过一些视频，音频输出正常。</p>

<p>我尝试了使用MBP内建的外放和插入iphone4s的耳机并将音量调整到最大，没有任何声响。网上查阅了一些相关异常的资料，发现可能是NVRAM的问题。官方资料见链接：<a href="http://support.apple.com/kb/HT1379?viewlocale=zh_CN">《关于 NVRAM 和 PRAM》</a>。</p>

<p>按照重置NVRAM的方法操作后，果然Mac又拥有了声音，可以看好声音啊=)</p>

<p>这里对NVRAM做一些记录：</p>

<!--more-->


<h3>NVRAM</h3>

<p>Mac 会将某些设置储存在特殊内存区域中，而且即使关机这些设置也不会丢失。在基于 Intel 的 Mac 上，存储位置是称为 NVRAM 的内存。NVRAM为Non-Volatile Random Access Memory的缩写。</p>

<p>存储在 NVRAM/PRAM 中的信息包括：</p>

<ul>
<li>扬声器音量</li>
<li>屏幕分辨率</li>
<li>启动磁盘选择</li>
<li>最近的内核崩溃信息（如果有的话）</li>
</ul>


<!--MORE-->


<p>也就是说，如果机器存在声音、屏幕分辨率、启动速度等方面的异常时，可以尝试使用重置的方式做恢复。同时，官方资料中也提到，『如果您正在故障诊断网络问题，重置不会有任何帮助』。</p>

<h3>配置NVRAM</h3>

<p>实际上，也可以在shell中命令配置nvram。比如，可以通过<code>nvram -xp</code>命令查看到xml格式的配置表示。我的如下：</p>

<p>```
$ nvram -xp
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;LocationServicesEnabled&lt;/key&gt;
&lt;data&gt;
AQ==
&lt;/data&gt;
&lt;key&gt;SystemAudioVolume&lt;/key&gt;
&lt;data&gt;
Xw==
&lt;/data&gt;
&lt;key&gt;backlight-level&lt;/key&gt;
&lt;data&gt;
9wA=
&lt;/data&gt;
&lt;key&gt;fmm-computer-name&lt;/key&gt;
&lt;data&gt;
Ymlhb2JpYW9xaQ==
&lt;/data&gt;
</code></pre>

<p></dict>
</plist>
```</p>

<h3>其他参考</h3>

<ul>
<li><a href="http://blog.csdn.net/afatgoat/article/details/3851554">Mac OS X: 系统nvram启动参数</a></li>
<li><a href="http://support.apple.com/kb/HT1895?viewlocale=zh_CN">何时要重置 NVRAM 或 PRAM</a></li>
<li><a href="http://en.wikipedia.org/wiki/Non-volatile_random-access_memory">NVRAM wikipedia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac的GUI哲学]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/06/09/something-about-mac-gui/"/>
    <updated>2013-06-09T01:00:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/06/09/something-about-mac-gui</id>
    <content type="html"><![CDATA[<h2>GUI哲学</h2>

<p>前些日子，看了Tinyfool老师的一篇文章<a href="http://blogread.cn/it/article/1089?f=wb">《开发人员为何应该使用 Mac OS X 兼 OS X 小史》</a>，才恍然Mac系统可不仅仅是UI上与Windows大相径庭，而是自底而上的区别。这种区别渗透到了整个系统框架的设计理念中。</p>

<p>简单概括下我的认识：相比Windows和Linux两大阵营，Mac OS X除了『品味』上的优势之外，最重要的两点是：1.对GUI应用程序脚本化的有力支持；2.能实现GUI程序之间快捷的进程间通信。</p>

<h4>GUI程序之间的进程间通信</h4>

<p>IPC对于多用户分时系统的重要性不言而喻。其中从用户视角来看，如何让多个程序之间能更友好的交互是非常重要的。C++语言虽然面向对象，但在底层来看，其实依旧是冷冰冰的汇编代码，没有更整体的对象环境支撑，而以此构建的Linux也无法对进程间通信形成强力的支持。相比之下，乔布斯的团队借助于SmallTalk的消息传递机制创造了Objective-C，并搭建了自己的运行时和类库框架Cocoa，让系统无论从自身的迭代开发还是应用开发，得到了很大提升。值得一提的是，Objc虽然最近才由于iOS、Mac平台的开发的火热进入热门编程语言的行列，其实它比Java还早十年出生。像最近由于Rails框架而火爆起来的Ruby和持续坚挺的Java，都从SamllTalk中吸收了很多设计理念，就别提C#了。</p>

<h4>GUI应用程序的脚本化</h4>

<p>图形的交互方式确实人性化，但应用程序脚本化控制的方式在一些特定的场景里也可以大大提高生产效率。比如微软Office的VBScript。即使是一般用户，不愿意自己写脚本，脚本化的方式也能让开发人员更方便快捷的开发出新颖的功能和产品。</p>

<p>让应用全部统一开放脚本很难，特别是从市场的层面而言，如果没有一直贯彻这一战略，造成平台很多应用不支持这一功能，则很难推广。苹果九十年代已经开始积累这方面的基础，有先见之明。</p>

<h2>GUI工具</h2>

<p>下面是我接触过的一些Mac下的GUI工具。它们大都散发着对开发者的自由开放的态度:)</p>

<h3>Quicksilver</h3>

<p>『为了不把Mac当Windows用』，可以从<a href="http://qsapp.com/">Quicksilver</a>入手。它能将双手从触摸板中解脱出来，或许这是很多开发者的梦想吧;)。只需用热键激活输入框，输入简单的匹配字符串，就可召唤出某个应用，或者执行某些搜索、查找任务，快哉！</p>

<p>简单说说配置和使用方式：</p>

<ul>
<li>1.安装好后，在preference -> command中可以设置HotKey（唤醒的虚拟按键），我的习惯设置是<code>control+enter</code>。preference -> application可以设置是否需要在dock中显示，以及登入时自动启动。</li>
<li>2.基本功能：快捷打开应用。按下Quicksliver的HotKey（我的是<code>control+enter</code>）,在弹出的输入框中输入所需应用的头几个字母或者缩写，Quicksliver会自动匹配最可能的应用，并显示出来，如果不是自己想要的，可以移动「上下光标」打开下拉菜单选择。选中后回车即可，如图。</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/64021093/Pics/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202013-06-09%20%E4%B8%8B%E5%8D%881.23.22.png" title="Quicksilver示例" alt="Quicksilver" /></p>

<ul>
<li>3.还有很多其他的细节功能，通过Quicksliver的插件实现，可以根据自己的需求来定制。</li>
</ul>


<h3>Shortcat</h3>

<p><a href="http://shortcatapp.com/">shortcat</a>是Mac下的快捷操作利器。相比Quicksilver，Shortcat有不同的定位：通过键盘定位到屏幕上某窗体内的某个位置。其官网的示例就是如何通过Shortcat使用键盘更改DNS设置，注意，是完全不用鼠标噢。有人可能会想那为什么卜直接使用cmd呢？我想答案是Shortcat就是基于GUI的解决方案，是GUI和键盘快捷键的完美组合，与cmd并不冲突。</p>

<p>下面简单的交代下Shortcat的使用方式：</p>

<ul>
<li>1.快捷键<code>Cmd+Shift+Space</code>用来激活输入框。使用关键字的定位方式类似于Quicksilver。比如：如果目的是『Language &amp; Text』，那么输入『lt』、『lang』；『sa』代表show all，显示所能用于文字定位的区域。『.』能展示出所有可控制区域，包括没有文字定位的区域。</li>
<li>2.输入了关键字后，界面中被匹配到的模块会被套上不同颜色的方框。接下来，可以使用<code>control+key</code>重定位到对应位置，其中key为对应的匹配上的模块的字符标识。</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/64021093/Pics/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202013-06-09%20%E4%B8%8B%E5%8D%881.42.39.png" title="Shortcat示例" alt="Shortcat" /></p>

<ul>
<li>3.定位到合适的位置后，按下<code>enter</code>，可执行单击动作；对应的，双击<code>enter</code>为鼠标双击动作；如果需要配合其他按键的点击，比如<code>command+click</code>，执行<code>command+enter</code>即可；鼠标悬浮为<code>control</code>；双击<code>control</code>可实现聚焦。</li>
</ul>


<h3>GeekTool</h3>

<p><a href="http://projects.tynsoe.org/en/geektool/">GeekTool</a>类似于Windows下的widget，可以个性化的定制自己的桌面，添加插件，将CPU、HDD信息直接展示在桌面上，正如其名，Geek而又文艺!如下效果图：</p>

<p><img src="http://bbs.dgtle.com/data/attachment/album/201111/10/011505943pmpmm68enxwwd.png" title="GeekTool示例桌面" alt="GeekTool" /></p>

<p>详细配置可参考这篇文章<a href="http://www.dgtle.com/article-797-1.html">《教你装小清新—— Geektool &amp;&amp; Rainmeter 桌面皮肤推荐》</a></p>

<h3>Nocturne</h3>

<p><a href="http://code.google.com/p/blacktree-nocturne/downloads/detail?name=Nocturne.2.0.0.zip">Nocturne</a>这是桌面颜色控制的工具，与Quicksilver同为blacktree公司的产品。</p>

<p>使用方式：下载Nocturne2.0.0，解压后拖入应用程序文件夹，打开。在preference中可很直观的配置各项属性。其中，switch to night功能可以将Mac界面切换到黑夜模式，很好玩;)。</p>

<h3>参考：</h3>

<ul>
<li><a href="http://ksmx.me/blog/2012/03/18/customize-mac-desktop/">矮矬穷Mac桌面美化得瑟教程</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS的安全性和越狱]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/05/17/jail-break-your-ios/"/>
    <updated>2013-05-17T00:10:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/05/17/jail-break-your-ios</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/64021093/2013-5-16.jpg" title="Jailbrek" alt="alt jailbreak" /></p>

<p>提到<a href="http://en.wikipedia.org/wiki/IOS_jailbreaking#Security.2C_privacy.2C_and_stability">越狱</a>，很多人第一反应大概是免费的游戏和app。</p>

<p>作为软件从业人员，深知中国的大环境的特殊性。内有用户想吃免费午餐的不良付费习惯，外有行业内大头诸如某讯对创新的绞杀。大家对越狱是为了免费、盗版软件的认识，也就不奇怪了。</p>

<p>还有另一派人。越狱对他们来说，意味着开放。个人认为这也是Hack精神的精髓之一。事实上，iOS越狱也有自己的生态圈：Cydia就是越狱设备上App Store。</p>

<!--more-->


<h2>越狱的合法性</h2>

<p>数字千年版权法对iphone的越狱进行了特赦，直到2015年，对iPhone、iPod touch的越狱依然有效。但注意，iPad就没这么幸运了。</p>

<p>详情参见博文<a href="http://www.cultofmac.com/213144/unlocking-a-new-iphone-is-now-illegal-but-jailbreaking-is-still-safe-what-it-all-means-for-you/">《Unlocking A New iPhone Is Now Illegal, But Jailbreaking Is Still Safe — What It All Means For You》</a></p>

<h2>iOS安全性</h2>

<p>由于iOS没有开源，学术界和工业界对它的安全机制的论述资料很少。我在网上找到了上交一位学长对ios安全机制的分析文章，是他的硕士学位<a href="http://www.doc88.com/p-405566264292.html">论文</a>。作为参考，我整理了一些关键知识点。</p>

<h4>基于信任链的启动</h4>

<p>iOS的信任机制从系统启动那一刻起已经开始。
系统可信启动<a href="http://elinux.org/images/2/28/Trusted_Boot_Loader.pdf">trustedboot</a>：启动每一步都会检测签名，构成整个信任链。</p>

<p>还有另一种启动方式，是设备固件升级方式（DFU，Device Firmware Update），也是由签名构建信任链。</p>

<h4>程序签名</h4>

<p>iOS应用的ipa压缩包中包含可执行文件和数据文件。可执行文件只有在已签名的前提下才能运行。确保应用经过苹果认证。</p>

<p>越狱提升运行权限到root，修改引用加载策略，接受任意签名的应用。
“通过软件保证软件安全是不可能的”，iOS使用了硬件来做保护，但硬件部分也遭到了越狱的破解。</p>

<h4>沙盒技术</h4>

<p>iOS用沙盒技术实现访问控制
trustedBSD ：http://www.trustedbsd.org/
http://www.freebsd.org/doc/zh_CN/books/arch-handbook/mac-synopsis.html</p>

<h4>ASLR和PIE</h4>

<p>使用地址空间布局随机化（ASLR， address space layout randomization）和位置无关可执行代码（PIE，position independent executable）编译用来防止经典的缓冲区溢出攻击。</p>

<h4>数据保护机制：</h4>

<ul>
<li>硬件加密：AES协处理器，存储着UID，GID</li>
<li>软件加密：系统中每个文件、数据都用一个唯一的秘钥来加密。秘钥是有UID、GID一起产生的，存在keybag中，keybag通过用户的4位密码来保护。</li>
</ul>


<h2>越狱</h2>

<p>越狱主要就是在信任链的根bootrom阶段攻击。由于系统不断升级，攻击的方式也在不断演进，这个<a href="http://bbs.gean.cn/archiver/showtopic-213.aspx">链接</a>介绍了其中的一种情况。</p>

<h4>越狱后注意</h4>

<p>总的来说，越狱打破了iOS封闭的生态环境，也打破了它特有的保护壳。手机获得了root权限，恶意代码有了可趁之机。不要轻易的使用来源不明的应用和插件。</p>

<ul>
<li>非越狱手机：仅允许用户访问照片、视频数据；通过备份，可在pc端获取所有数据</li>
<li>越狱手机：拥有root权限。可以通过许多渠道如ssh，ftp获取系统数据。</li>
</ul>


<p>更多细节参见
* <a href="http://bbs.weiphone.com/read-htm-tid-1750886.html">《浅谈iOS越狱前后的安全问题以及安全风险》</a>
* <a href="http://www.pcpop.com/doc/0/890/890768_all.shtml">《iPad越狱不安全!安装应用/插件需谨慎》</a>
* <a href="http://www.cnbeta.com/articles/229192.htm">《iOS完美越狱 - 福利还是阴谋？》</a></p>

<h4>SHSH</h4>

<p>iPhone 3GS出来时候，苹果为加强对iPhone OS的控制对恢复(Restore)固件(Firmware)采用了验证过程，每次iTunes要恢复固件的时候都要连接苹果的服务器验证。手机的ECID和所刷系统版本号一起签名出一个SHSH文件，发送给服务器，服务器检测SHSH是否为新版本的系统所产生，如果是，则允许继续进行刷机，否则传回组织继续的信号。</p>

<p>SHSH是存储在苹果公司的服务器上的，用户需要通过备份原来的SHSH，并伪装一台苹果服务器来协助验证。　　</p>

<p>网络上SHSH备份方法的介绍很多，不了解的朋友自行Google吧。</p>

<h2>附录</h2>

<p>对于想开发iOS应用而又没有开发者账号的朋友，可以参考这篇文章<a href="http://kqwd.blog.163.com/blog/static/4122344820117191351263/">《Xcode 4.1~4.6 + iOS 5、iOS 6免证书(iDP)开发+真机调试+生成IPA全攻略》</a>，Xcode4.6 iOS6.0 亲测有效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚拟机中的网络配置]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/05/09/networking-in-virtual-machine/"/>
    <updated>2013-05-09T22:39:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/05/09/networking-in-virtual-machine</id>
    <content type="html"><![CDATA[<p>本文介绍三种虚拟机中常用的网络配置模式：NAT(网络地址转换模式)、Bridged nerworking（桥接网络模式）和Host-only（主机模式）。</p>

<h3>Network Address Translation (NAT)</h3>

<p>NAT模式使用了<a href="http://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">NAT</a>服务来给虚拟网络提供网络连接。</p>

<p>这种模式下，虚拟机能访问外部网络，外部无法直接连接到内部网络，除非使用端口映射<a href="http://nxlhero.blog.51cto.com/962631/742140">port forwarding</a>。</p>

<!--more-->


<p>NAT一般与<a href="http://zh.wikipedia.org/wiki/DHCP">DHCP</a>一起使用，以动态分配虚拟机内网IP，无序手动配置内外部网络环境。当然，为了让虚拟机每次开机时拥有固定的IP，也可以关闭掉DHCP服务，转而自己配置虚拟机的网络。虚拟机是linux的情况下，可以通过修改/etc/network/interfaces实现开机固定IP，示例如下：</p>

<p>```</p>

<h1>This file describes the network interfaces available on your system</h1>

<h1>and how to activate them. For more information, see interfaces(5).</h1>

<h1>The loopback network interface</h1>

<p>auto lo
iface lo inet loopback</p>

<p>auto eth0
iface eth0 inet static
address 172.21.2.43
netmask 255.255.0.0
gateway 172.21.1.1</p>

<p>```</p>

<p>实现原理如图：</p>

<p><img src="http://dl.dropboxusercontent.com/u/64021093/network/2.jpg"></p>

<h3>Bridged networking(桥接)</h3>

<p>在桥接模式下，本地物理网卡和虚拟网卡通过虚拟交换机进行桥接（无需在host上再开启新的虚拟网卡），物理网卡和虚拟网卡在拓扑图上处于同等地位，虚拟机就像是一台真实主机一样存在于局域网中。</p>

<p>桥接模式无法与DHCP一起使用，需要手动的配置虚拟机的网络参数，包括IP、网关、子网掩码和dns。其中网关、子网掩码、dns都应该与host设置相同值。在linux虚拟机中的设置示例如下：</p>

<p>```</p>

<h1>设置ip、子网掩码</h1>

<p>$ifconfig eth0 172.21.2.43 netmask 255.255.0.0</p>

<h1>设置默认网关</h1>

<p>$route add default gw 172.21.1.1</p>

<h1>设置dns</h1>

<p>$sudo vim /etc/resolv.conf
nameserver 172.21.1.1</p>

<p>```</p>

<p>实现原理如图：</p>

<p><img src="http://dl.dropboxusercontent.com/u/64021093/network/1.jpg"></p>

<p>相比NAT，桥接模式有一个前提条件，就是要获得另外一个host所在网段的IP。在内网环境中还很容易，如果是ADSL宽带就比较麻烦了，ISP一般是不会大方的多提供一个公网IP的，那种情况下，使用NAT或许是更好的选择。</p>

<p><a href="http://blog.chinaunix.net/uid-26212859-id-3051291.html">VMware的桥接网络配置</a></p>

<h3>Host-only networking(主机)</h3>

<p>以host为网关建立了新的虚拟网络，虚拟机无法访问外部网络，因此很安全。</p>

<p>和NAT一样，也使用了DHCP服务做虚拟网络内的IP自动分配。</p>

<p>另外，host-only模式下也可以进行扩展配置，让虚拟网络的机器也能访问到外网，比如自定制nat和dhcp的使用等等。</p>

<p>如图：</p>

<p><img src="http://dl.dropboxusercontent.com/u/64021093/network/3.jpg"></p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://networking.ctocio.com.cn/tips/110/8897610.shtml">解析虚拟VMware三种网络模式根本区别</a></p></li>
<li><p><a href="http://www.virtualbox.org/manual/ch06.html">virtualbox的网络模式详解</a></p></li>
</ul>


<p>图片引用自 ：<a href="http://networking.ctocio.com.cn/tips/110/8897610.shtml">解析虚拟VMware三种网络模式根本区别</a></p>
]]></content>
  </entry>
  
</feed>
