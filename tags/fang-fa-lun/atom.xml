<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 方法论 | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.me/tags/fang-fa-lun/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.me/"/>
  <updated>2013-11-07T02:33:21+08:00</updated>
  <id>http://biaobiaoqi.me/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《改变未来的九大算法》]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/10/03/nine-algorithms-that-changed-the-future/"/>
    <updated>2013-10-03T13:19:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/10/03/nine-algorithms-that-changed-the-future</id>
    <content type="html"><![CDATA[<h2>不要在意那些细节</h2>

<p>这是一本关于计算机世界的科普读物。豆瓣链接：<a href="http://book.douban.com/subject/24529132/">请戳</a>。</p>

<p>非常推荐刚接触计算机的朋友花上三五小时将全书通读一遍，没有技术细节，没有公式证明，它会告诉作者挑选出的九大算法出现的缘由和发展的过程。这些不关乎实现细节的思想概括，更能体现算法在整个领域中的存在的原因。它们不再是冷冰冰的算法过程，这是阅读大多数的书籍、教材所难以获得的。</p>

<p>至于我的推荐原因，如下全文。</p>

<!--more-->


<h3>课程学习之弊</h3>

<p>大二大三的那两年，在学校上过了网络、操作系统、数据库、算法设计等诸多计算机领域的基础必修课程。由于生性愚钝加之令人头大的砖头书的体系化、理论化，对于知识的掌握顶多处于知其然却不知其所以然的程度。在这种情况下，学习就退化为了填鸭式的记忆。比如我记得RSA的公钥加密流程，却无法理解为何要套用这么一大堆的数学方法来得到如此神奇的效果，比如，我知道数据库有一套日志机制，却不知道它是如何与其他的组件共同构建起一个系统的……没有来龙去脉，就没有对技术发展的感知，没有对技术本质的理解和认识。</p>

<p>经过了四年多的摸爬滚打，到现在对这些基础知识的认识自然远好于当年上课的理解水平，不是因为我在反复的学习课程内容，而是从实践中获得了新的认识。</p>

<h3>从生活出发</h3>

<p>大多数人的思维习惯，倾向于从已知的事物中衍生对新事物的认识，这是一种类推。而高校的大多数教材和教授方式较少考虑到这一点，一种简单粗暴的直入主题的方式被大量的使用，排斥了知识的前因后果，技术的来龙去脉，剩下的只是新体系本身。这增加了学习曲线的入门坡度。</p>

<blockquote><p>理论是灰色的，生活之树常青</p></blockquote>

<p>《改变未来的九大算法》是对歌德这句话的良好实践。</p>

<!--more-->


<p>比如在阐述公钥加密机制时，作者从生活中的寄信讲起，一步步类比到计算机的通信上，并用染料配色的方式举例了迪菲赫尔曼机制。生动形象的描述了算法的原理和来由。</p>

<h3>抛开细节实现</h3>

<p>过往的教材一旦陷入对某些实现细节的阐释，就失去了对全局上下文的把握。就像镜头对焦到了一个点上，造成了周边景物的模糊化效果。</p>

<p>《改变未来的九大算法》全书很少涉及到技术的实现细节，这正是它的优势所在。比如数据库的一致性章节，从一个银行转账的实例讲起，通过所面临的一系列问题的解决方案的描述，让人对数据库的整体实现有了全局的把握。在理解的前提下，更深入的学习也变得更有动力和方向。</p>

<p>奈何自己已经过了朦朦胧胧的那几年，在此将本书强烈推荐给初涉计算机领域的朋友们。当然，其他人粗读一遍，也是对自己知识体系的一次小梳理啦;)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android小游戏：功夫蛇 团队开发经验总结]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/09/06/kongfu-snake-project-summary/"/>
    <updated>2013-09-06T00:00:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/09/06/kongfu-snake-project-summary</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>曾经没有代码管理的习惯，不用回版本控制工具。这种陋习虽然让原来千穿百孔的代码远离了实现，但这种逃避未必就是一件好事吧;)。
于是从博客中挖出了原来的文章，并千辛万苦找到了最早的代码贴出来。</p>

<p>这篇文章是参加Google的Android应用开发大赛时，写的总结帖。主要从团队和设计两个方面进行了分析总结。虽然如今看来一些内容显得稚嫩和粗糙，
但没有功劳还是有苦劳的！还是那句话，我们要不断收集生活中的珠子，等到最后，才能串成一条链。</p>

<p>我同步的将代码贴到了自己的<a href="https://github.com/biaobiaoqi/kongfusnake">github</a>里。对于这份代码，或许以后有时间，可以重构下代码？又或者没有时间？
这都无所谓。能够让原来的脚印在路途中获得一席之地，也才有之后更好的旅程。</p>

<p>内容不做修改，这就是12年1月时，我的思维层次总结啦。</p>

<h2>原文</h2>

<p>此文从团队和设计两方面，进行了一些经验总结。没有涉及技术实现的讨论。</p>

<p>KongfuSnake，这是一款取材自贪吃蛇的android游戏。（弱弱的说，这个取材其实这是我最不敢说出口的，被大多数人评价为老套、
过时的创意>&lt;...但需要解释的是，我们确实做了很多“微创新”~）。</p>

<!--more-->


<p>下载链接：<a href="http://www.google.cn/university/androidchallenge/2011/gallery.html#tab=d1-13">KongfuSnake</a></p>

<h3>1.背景</h3>

<p>参加的google的android应用大学生挑战赛上个月已经画上了句号。</p>

<p>结果是幸运的，最终我们跟另外的4只队伍一起，获得了全国总决赛二等奖。当然，名次并不是最重要，重要的是经历了什么，学到了什么。于是，用心的敲下这些文字，给自己的旅途留下脚印，期望对以后的学习、生活有所助益。也算是认知盈余吧。</p>

<p>11年6月份吧，大三下学期萌发参加比赛的念头。</p>

<p>当时的考虑是，自己由于时间安排的关系，无法参加暑期实习，而本科前三年重心一直不在编程上，想借暑假的空闲机会，体验一下比赛的乐趣，
也算见识下android的开发体系。而作为团队参加也可以积累些许技术沟通的经验，于是找到了同专业的一个同学，一起组队参赛。
后期，又邀请了工业设计专业的一位同学加入，为作品的UI润色，用足了比赛规定的最多三个名额的限定。</p>

<p>回过头来，那些小九九也算达到了一些～甚至还有当时没有考虑到的收获，比如对小游戏设计方面的浅显理解。</p>

<h3>2.团队</h3>

<p>这是一个三人的小规模学生团队，说我们小打小闹也罢，团队里的沟通交流总归是存在的。麻雀虽小，五脏俱全～</p>

<h4>2.1.团队的组成</h4>

<p>经历过以前一些团队作业，我觉得大学生团队最重要的问题就是是否每个人都有足够的时间。基于这个原则，我找到了yzq童鞋。</p>

<p>后期，我们发现必须找人润色UI，又通过学校论坛征到了比我们低一级的mqx童鞋，这一步走的略显仓促，与项目早期自己的侥幸心理有关>&lt;....
准备不周全。幸运的是，最终效果还不错。</p>

<p>值得反思的是，最初我在征UI设计时，没有与候选人沟通好具体的职责：
团队需要的是能尽可能的提供UI的整套解决方案，而不仅仅是按照程序开发者的意愿P几张图而已。
由于这一失误，mqx童鞋后来的大多数时间里只是照着后半句在做，让我们编程人员力不从心>&lt;....。
当然，另一个侧面，也算是培养了自己产品设计的一些理念吧。。</p>

<h4>2.2.团队沟通</h4>

<p>开发期间，由于暑假回家、之后我出国交流等原因，大家很多时间都不在一起。只是通过QQ进行交流的。交流的方式也比较随意。</p>

<p>由于项目小，我们没有使用到svn、git等版本控制工具。这些原始的沟通方式，虽然在小项目中负面影响不大，但相信随着项目规模的增大，
它们对效率的影响会显现出来，特别是版本控制方面。这里以后需要注意。</p>

<p>另外，在沟通技巧上，自己比较欠缺。由于专业不同的关系，我与负责UI的童鞋对某些设计的理解不尽相同，
而自己起初没有注意到这一点，让大家无谓的耗费了精力；每个人都会有不同的想法，在处理矛盾想法的解决时，作为项目发起人，
我的方式不够委婉。</p>

<h4>2.3.团队建设</h4>

<p>我有意识的提及一旦获奖，我们可以获得的收益，想借此激励大家的积极性。不过技巧性还需要提炼。</p>

<h3>3.设计</h3>

<p>评价一款手机游戏的优缺点，相对来说比较容易。但真的要做出决策如何设计一款游戏，则难了很多。</p>

<p>看过网上很多移动应用开发的设计指南，一条一条的罗列挺纷繁的，总结自己粗劣的设计经验，是如下两条：创新的想法和合理的取舍（trade-off）。</p>

<p>创新能挖掘出用户的需求，合理的取舍，能让众多创新的想法融合出一个完整的产品构图。</p>

<h4>3.1关于创新</h4>

<p>不要被原来的设计需求禁锢。创新可以挖掘出新的需求。</p>

<p>刚开始的时候无法囊括所有的创新点，新的点子可能在之后的经历中又突然冒出，毫不犹豫的去尝试，不断迭代改进。</p>

<p>当然很多创新点可能在游戏的整体中不和谐，但这些层出不穷的创新只要有千分之一是可行的，就可能让产品脱颖而出，不再陈旧。</p>

<h4>3.2关于取舍（trade-off）</h4>

<p>突出主题。</p>

<p>手机界面相对较小，视觉上容量本就不多。细小的图形元素容易造成蔓延昏花的效果。突出能抓住用户眼球的主题很重要
，必要的时候，需要适当舍弃可能造成混淆的元素。</p>

<p>增强元素的表现力和区分度。视觉、听觉、触觉（震动）等各个方面增强各个元素之间的区分度和表现力。</p>

<p>统一风格。每一个按键，每一个游戏元素，包括背景、布局、音效，都需要统一风格。</p>

<h3>另</h3>

<p>由于时间拖得比较久，没有及时的总结经验教训，感觉很多细节都已经离我远去了>&lt;...下次得注意了。</p>

<h3>另另</h3>

<p>由于代码写的比较搓，也就不公开放出了强奸大家的眼球了>&lt;...，要学的还有很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终于算完了这道『1+1』]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/07/29/after-pat-practice/"/>
    <updated>2013-07-29T22:12:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/07/29/after-pat-practice</id>
    <content type="html"><![CDATA[<p>在<a href="http://weibo.com/redow7">@ReDow</a>、<a href="http://weibo.com/cloudbye">@麦迪的小腿</a>和<a href="http://weibo.com/linest">@linest</a>等小伙伴的帮助下，终于断断续续的爬完了<a href="http://pat.zju.edu.cn/">PAT</a>的Basic Level和Advanced Level，阶段性填补了自己惨白的算法短板。在cs的圈子里，说PAT是入门的『1 + 1』不为过。刚完成『1 + 1』，作为五年科班的人，确实不够光彩。不过现在能做的也只是尽力弥补本科时间里的虚度。</p>

<p>从亲手挖的坑里往外爬，需要付出比其他人更多的努力。没时间享受题目ac之后的快感（画外音：这么简单的题会有快感么=.=#），倒会时不时蹦出一股脑的蛋疼：『你当初干XX啥去了！』。</p>

<h2>当初...</h2>

<p>记得大一的时候，每天花好几个小时泡图书馆看各种IT杂志和技术书籍。在刚开始学C语言编程的时间里，我看着中间件、系统软件、终端融合、东软和用友金蝶之争等一系列摸不着头脑的东西，在对数据还没概念的时候，看着数据库的范式和E-R图…总之，就是一直在门外徘徊。</p>

<p>之后专业课多了起来，我又兴高采烈的混在工高大神的队伍里，早上集结同学每天早上五点多轮流爬起来去自习室占座，以看似端正实则不专注的令人发指的学习态度在GPA榜单上持续退步着。浑浑噩噩的搞过数模，无果。当然，以『学渣』的水平充着『学霸』也是有好处的，就是沾染了大神的精神气，比如记忆犹新的有在CMU念书的鑫磊大神的专注、冷静和每天4小时的睡眠。同时，我还风风火火的参加了ASES和求是强鹰，搀和着所谓的创业。大四在爱尔兰的交流，除了英语和专业课，其他的倒是学的挺多，比如烧饭，单反和旅游……本科唯一做的跟编程有关的说得出口的，也就写了个Android程序在比赛里获了个奖，不提也罢的那种。</p>

<h2>变</h2>

<p>在《<a href="http://book.douban.com/subject/1048007/">高效能认识的七个习惯</a>》里看过一个观点：每个人都有属于自己的『关注圈』和『影响圈』。影响圈是个人对外界产出的途径，关注圈则意味着个人对外界的期许。可以想见，关注圈大于影响圈。正确的成长方式是尽力扩大影响圈，以此催生关注圈的扩大。而我则是走在了相反的方向：一直致力于开发自己的关注圈，后果是影响圈不见长进。一度我开始注意遏制自己这方面的好高骛远，不过事实证明，我还是比较喜欢在学爬得时候看走路的教学视频。</p>

<!--more-->


<p>后来听闻了杨绛先生的一则小事。大概是说，一个年轻人写信给杨绛，说自己平时许多问题想不明白，想请教下怎么应对。杨绛回复说『是你看书太少，想的太多』。第一眼看到这个故事，我的想法就是：那不是在说的我么。对我而言，『书』指的更泛一些，理解为阅历或许更恰当。让可能性禁锢了思想，不值得，不如踏出去，自己去找答案。</p>

<p>研究生的一年又过去，很难说我这一年达到了自己的预期。不过也没怎样，世界变化这么快，也容不得静态的计划。至少，我渐渐的逼近了自己喜欢的生活节奏。</p>

<h2>信仰</h2>

<p>都说现在的国人根子里没有信仰，年岁越长也渐渐有些自己的体会。面对远超过big-data量级的选择，我时常彷徨，我不敢说自己有信仰。我只是一直在坚持找寻。</p>

<p>用乔老爷子著名的斯坦福演讲中的一句话结束：</p>

<blockquote><p>You can't connect the dots looking forward. You can only connect them looking backwards, so you have to trust that the dots will somehow connect in your future. You have to trust in something--your gut, destiny, life, karma,whatever--because believing that the dots will connect down the road will give you the confidence to follow your heart, even when it leads you off the well-worn path, and that will make all the difference.</p></blockquote>

<h3>PS：</h3>

<p>据我所知网上的资料没有对PAT题型整体的把握和讲解。接下来的时间，我会整理下自己的代码和解题思路，将整理结果放到博客上来，也算自己的复习。链接都准备好了：<a href="http://biaobiaoqi.me/blog/2013/08/03/overcome-pat/">《PAT练习题概览》</a>。如果是404Error，就请再耐心等待几天吧;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[出栈序列的可能性判定]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/07/16/verify-pop-sequence-for-stack/"/>
    <updated>2013-07-16T01:32:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/07/16/verify-pop-sequence-for-stack</id>
    <content type="html"><![CDATA[<h2>问题说明</h2>

<p><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1051">PAT1051</a>：给定stack的容量，给定数据的入栈顺序：从1开始的正整数序列，在允许随机的出栈操作的情况下，要求判断某出栈序列是否可能。</p>

<p>比如，告知stack容量为5，入栈序列的最大值为7。有两个序列需要判断合理性：</p>

<ul>
<li><code>1 2 3 4 5 6 7</code>： 这个序列是可能的，只需每次入栈时都做出栈操作。</li>
<li><code>3 2 1 7 5 6 4</code>： 这个序列是不可能的，其中前半部分<code>3 2 1</code>是合法的，先将<code>1 2 3</code>顺序入栈，然后三次执行出栈操作。而之后的<code>7 5 6</code>则是不可能的。</li>
</ul>


<p>要完成判定过程，常规思路是直接使用的stack数据结构模拟出栈序列做操作，然后判定是否会触犯条件。但考虑到PAT1051中时间限制只有10ms，虽然常规方法是线性的，似乎也无法保障（事实证明是错误的，用常规方法也能在PAT上AC），我想到从序列本身的特性入手，找规律，于是有了一种效率更高的判定逻辑。</p>

<h2>常规思路</h2>

<p>直接使用出栈序列指导stack模拟操作。判定条件有两条：</p>

<ul>
<li>1.栈中数据量不超过栈的容量。</li>
<li>2.出栈只能从栈顶取，不应该出现从固定的堆栈中取出其他数据的情况。</li>
</ul>


<p>算法描述如下：</p>

<p>用游标记录当前已知压栈的最大数据cur。如果新的读入数据tmp（即出栈序列中的某数据）大于cur，则将cur到tmp之间的数据顺序压入栈中，更新cur并执行检查1；如果新的读入数据tmp小于cur，则一定是直接出栈获得的，执行检查2。</p>

<p>如果能顺利完成就是合理的，如果操作过程违背了一些规则，则判定为不合理。C++实现代码如下：</p>

<p>``` cpp</p>

<h1>include&lt;stdio.h></h1>

<h1>include<stack></h1>

<p>using namespace::std;
int m, n, k, tmp, cur;
bool flag;
stack<int> s;
int main()
{</p>

<pre><code>scanf("%d %d %d", &amp;m, &amp;n, &amp;k);
while(k --) {
    flag = true;
    cur = 1;
    s.push(1);
    for (int i = 0; i != n; ++ i) {
        scanf("%d", &amp;tmp);
        if (tmp &gt; cur) {
            for (int j = cur + 1; j &lt;= tmp; ++ j)
                s.push(j);
            if (s.size() &gt; m) flag = false;
            cur = tmp;
        }else {
            if (s.top() != tmp)
                flag = false;
        }
        s.pop();
    }

    if (flag) printf("YES\n");
    else printf("NO\n");
}
</code></pre>

<p>}</p>

<p>```</p>

<h2>更高效的判定逻辑</h2>

<p>实际上，在PAT1051的题目中，入栈序列的每个数值是由小到大排列的，这个情况非常特殊，要通过出栈序列判定可能性是存在简便思路的。</p>

<p>对比分析题中Sample给出的序列，结合上面提到的两条冲突条件入手分析：</p>

<ul>
<li><p>1.某个数出栈时，能判定在它出站前，栈中的数据总数不得超过栈的容量：</p>

<p>  出栈的每个数，都曾经入栈过。而通过出栈序列，能计算出在它刚入栈时栈中所包含的元素的数量（当前的出栈数值 - 已经执行过的出栈操作数量 == 当前栈中元素的数量），这个值不得超过栈的容量。</p></li>
</ul>


<!--more-->


<ul>
<li><p>2.出栈时，只能从栈顶取数，而不应该出现从固定的栈中取出其他数据的情况。</p>

<p>  根据观察分析发现，当某数据m出栈之后，比m小的数据如果在m之后出栈的，它们所组成的序列本身需要保持从大到小的顺序排列。举例：如<code>3 2 1 7 5 6 4</code>这个出栈序列，在<code>7</code>之后有<code>5 6 4</code>这个子序列，它们都大于<code>7</code>，但却没有保持一个递减的顺序，这是不合法的。</p></li>
</ul>


<p>C++实现代码如下：</p>

<p>``` cpp</p>

<h1>include&lt;stdio.h></h1>

<p>int m, n, k;
int max, min, tmp;
bool flag;
int main()
{</p>

<pre><code>scanf("%d %d %d", &amp;m, &amp;n, &amp;k);
while(k --) {
    flag = true;
    max = 0;
    min = 1001;

    for (int i = 0; i != n; ++ i) {
        scanf("%d", &amp;tmp);
        if (tmp &gt; max) {
            if (tmp - i &gt; m) flag = false;
            else max = min= tmp;
        } else {
            if ( tmp &gt; min) flag = false;
            else min = tmp;
        }
    }

    if (flag) printf("YES\n");
    else printf("NO\n");
}
</code></pre>

<p>}
```</p>

<h2>总结</h2>

<p>在我的理解之中，经典的算法、数据结构是在面对编程问题的解决过程中所抽象出的通用模型。而生活是多变的，并不像考试卷一样简单的套用数学题所能解决，很多情况下，编程问题也是如此。那么除了这些经典的方法外，认真分析条件，并进行针对性的优化甚至重新设计就非常重要了。这里仅仅是一个小实践。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《俞敏洪口述》]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/07/07/yuminhong/"/>
    <updated>2013-07-07T23:53:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/07/07/yuminhong</id>
    <content type="html"><![CDATA[<h2>质朴、诚恳和坚韧</h2>

<p>这本书是某次在Amazon上购书『满100送书一本』时挑的。放在抽屉里有段日子了。</p>

<p>一直挺崇拜俞敏洪老师。初次了解到他是高中的时候看的『赢在中国』，俞敏洪老师是嘉宾点评。而后混在考T的大流中去上了新东方的课程，几个老师讲得不错，比较可惜的是远离了老俞的时代。恰好前两天热映的『中国合伙人』，又把他拉回视野前沿。周日，趁着没心情码代码，忙里偷闲的读完了这本自传体的文字。</p>

<p>我不太喜欢读『活人』的传记。没有盖棺定论的事儿，或多或少掺杂些美华。但读这本书，却丝毫没有表现出浮夸，就像他的性格一般质朴、诚恳和坚韧。</p>

<p>或许在某些名人的传记里，永远不会看到他通过喝酒打通关系搞定了某个问题，而老俞有。书里多次的描述了他是怎样融入了这个『人情社会』。不可否认，他的本分和待人诚恳让他有人缘，这是他的优势。</p>

<p>他能在面对东方学校过河拆桥的举动下，沉住气，以和为贵，用合理的手段占据主动。</p>

<p>他能在北大读本科的阶段受众人嘲讽的环境下成长，不断学习，在毕业时，喊出『你们干十年成的我干二十年，你们二十年成的我干四十年。如果实在不行，我会保持心情愉快、身体健康，到八十岁以后把你们送走了我再走』。</p>

<p>凡此种种……</p>

<h2>世界观</h2>

<p>从每个成功的人的经历中，都能总结出数不清的箴言。成功的理由永远说不完。而这本书里，对我而言感触最深的无非是下面这些话：</p>

<blockquote><p>人生就是这样，你不受这个苦就会受那个苦。一个人如果从苦中能找到乐和幸福，那他就是幸运的。……我深刻的意识到什么也不做的痛苦比任何其他痛苦更加深刻，所以我一定要做事，做事的标准就是必须做对社会有好处的事情，以最大的努力在痛苦的世界中尽力而为。</p></blockquote>

<p>对我而言，这句话实在受用。我无法证明这些字在未来的时间里能对我造成的影响，却打在我最近几年来受困扰最多的点上。</p>

<p>乐观让人笑着面对生活。生活总归是有各种委屈、各种阻力，笑脸的背后，时常是受伤的心，区别在于受伤的心能埋得多深。我宁愿相信，乐观是因为能接受苦，能从苦中找到快乐，而不是没有苦。</p>

<p>时常的，我被不好的状态左右。那是种很奇怪的感觉，是面对压力的逃避、拖延，独自缩在没有人看得见的角落，在电脑屏幕前刷着网页，时间慢慢流走。然后心情越来越差，因为一事无成的颓废感。我是闲不下来的人。是的，『什么也不做的痛苦，比任何其他痛苦更加深刻』！</p>

<p>曾经在ASES的分享会上，听dd讲起过<a href="http://cuitianyi.com/blog/authentic-happiness-%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/">『积极心理学』</a>。其中有个观点是：『享乐是心灵资本的消费，而心流中的满足则是心灵资本的投资』。简单的讲，创造价值的事情会让我得到心流的满足，而简单的娱乐则会消费这种满足感。或许当两者之差为负的时候，我就感受到了那种空虚和煎熬，不止什么都不做，还消费了更多。</p>

<p>正是对社会责任的追求，老俞没有沉浸再新东方的飞速发展中。对他而言，现在的新东方的经营一切都要权衡公司的利益和教育理念。虽然他的新东方充满了实用主义和人文情怀，虽然他能让新东方尽到企业的社会责任，但这依然不是他想要的。他正在筹划办私立高校，用他的教育理念，给中国的教育发展贡献力量。这是中国的希望。</p>

<p>最后，以老俞的一句话结尾：</p>

<blockquote><p>人生的苦难肯定是没有尽头的，人要做的是在苦难中奋发起来，做自己能够做的和应该做的事儿，这就是我的世界观。</p></blockquote>
]]></content>
  </entry>
  
</feed>
