<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: UI | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.me/tags/ui/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.me/"/>
  <updated>2013-11-07T02:33:21+08:00</updated>
  <id>http://biaobiaoqi.me/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[定制Octopress]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/"/>
    <updated>2013-07-10T01:53:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress</id>
    <content type="html"><![CDATA[<p>在github pages上搭建好octopress博客之后，博客的基本功能就能使用了。如果想自己定制也是没问题的，octopress有较详尽的官方文档，原则上有问题求助官方即可：<a href="http://octopress.org/help/">octopress-help</a>。官方没有包纳的也可以去询问<a href="http://stackoverflow.com/questions/tagged/octopress">stackoverflow</a>。 当然，中文的看起来总会省事儿点。我做了如下一些总结;)</p>

<p>不会ruby的童鞋特别注意：配置_config.yml的过程中特别注意，配置项『:』后要留空格，否则会报错。</p>

<p>另外，一些『土方法』可能并不利于程序的维护可扩展，有空再仔细研究，大家将就着用吧;).</p>

<h2>0.安装第三方主题</h2>

<p>之所以把这一点标记为0，是因为在博主刚刚经历了博客主题的更新后，惨烈的发现需要重新配置包括评论、百度统计在内的不少东西。</p>

<p>应该是自己在做定制化的过程中乱修改源码（这是一种很不可取维护方式，使软件难以持续扩展）造成的，又或者octopress框架本身对定制化扩展的支持比较弱（对ruby不熟，对octopress也一知半解，我不确定是不是这个原因）。</p>

<p>简而言之，初接触octopress的朋友们，建议先安装第三方主题，再参考以下定制方法。</p>

<p>我使用的第三方主题是<a href="https://github.com/gehaxelt/CSS-WhiteLake">『whitelake』</a>。</p>

<p>安装过程很简单:</p>

<p><code>
$ cd octopress
$ git clone https://github.com/gehaxelt/CSS-WhiteLake.git .themes/whitelake
$ rake install['whitelake']
$ rake generate
</code>
注意，执行<code>rake install['whitelake']</code>之后，直接使用<code>rake preview</code>浏览网页会遇到很多瑕疵，<code>rake generate</code>之后再<code>rake preview</code>就没问题了。</p>

<p>更多第三方插件和主题资源，参见<a href="https://github.com/imathis/octopress/wiki">官方repo的wiki</a>.</p>

<h2>1.装饰边栏</h2>

<p>以增加豆瓣展示框为例。参加正反反长大哥的博客<a href="http://icodeit.org/2012/10/how-to-embed-douban-show-in-your-octopress-site/">How to Embed Douban-Show in Your Octopress Site</a></p>

<h2>2.增加评论和分享功能</h2>

<p>虽然octopress内置的disqus评论系统很不错，但在国内的使用并不普及。相比之下，友言、多说等第三方评论则更接地气，可以利用到微博、人人等SNS账号。</p>

<h3>2.1友言</h3>

<p>本博客采用了友言。首先注册<a href="http://www.uyan.cc/">友言</a>的账号，如果不注册，虽然也能实现评论功能，但没有后台管理整个站点的评论会十分纠结。注册完成之后，选择获取代码，将这串代码贴入相应的位置，即可实现第三方评论。</p>

<p>在路径<code>$OCTOPRESS/source/_includes/post/</code>上创建文件<code>youyanandjiathis.html</code>，功能代码放入其中。</p>

<h3>2.2加网</h3>

<p>分享方面，本博客使用了<a href="http://www.jiathis.com/getcode/icon">加网</a>。注册后，在更多高级自定义功能中，可能自定义不同的分享按钮，生成代码后，也将生成的代码贴入<code>$OCTOPRESS/source/_includes/post/youyanandjiathis.html</code>中。</p>

<p>现在，youyanandjiathis.html的样子如下(需要注意，自己使用时，uid显然是不一样的啦)</p>

<p>``` html</p>

<!-- JiaThis Button BEGIN -->


<div class="jiathis_style_32x32">
    <a class="jiathis_button_qzone"></a>
    <a class="jiathis_button_tsina"></a>
    <a class="jiathis_button_tqq"></a>
    <a class="jiathis_button_weixin"></a>
    <a class="jiathis_button_renren"></a>
    <a href="http://www.jiathis.com/share?uid=1814751" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
    <a class="jiathis_counter_style"></a>
</div>


<script type="text/javascript">
var jiathis_config = {data_track_clickback:'true'};
</script>


<script type="text/javascript" src="http://v3.jiathis.com/code/jia.js?uid=xxxxxx" charset="utf-8"></script>


<!-- JiaThis Button END -->




<!-- UY BEGIN -->


<div id="uyan_frame"></div>


<script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=xxxxxxxx"></script>


<!-- UY END -->


<p>```</p>

<h3>2.3将功能增加到博客中</h3>

<p>功能代码已经都在youyanandjiathis.html中了，接下来是让blog使用到这些功能代码。</p>

<p>首先在_config.yml中增加开关：
``` ruby</p>

<h1>comment and share</h1>

<p>comment_and_share: true
```</p>

<p>然后在<code>$OCTOPRESS/source/_includes/post/sharing.html</code>中的，根据开关<code>comment_and_share</code> 引入对应的功能代码<code>post/youyanandjiathis.html</code>，类比于默认实现中的<code>&lt;facebook_like&gt;</code>部分。代码如下（使用时，先去掉反斜杠）：</p>

<p>``` html</p>

<p>  {\% if site.comment_and_share \%}</p>

<pre><code>  \{\% include post/]youyanandjiathis.html \%\}
</code></pre>

<p>  {\% endif \%}</p>

<p>```</p>

<h3>2.4友言验证</h3>

<p>另外，需要在友言的后台处理评论，甚至做一些定制化处理，需要通过友言的验证。详情在友言的管理员后台可见。</p>

<h2>3.定制域名</h2>

<p>如果你拥有自己的域名，可以CNAME到github pages上。以我的配置为例（我的域名为<code>biaobiaoqi.me</code>）。</p>

<p>1.在octopress的source目录下创建CNAME文件，并输入新域名：biaobiaoqi.com</p>

<p>2.在域名管理中，创建或修改A记录，指向207.97.227.245这个地址。</p>

<p>3.创建CNAME记录，www.biaobiaoqi.com -> biaobiaoqi.github.com</p>

<p>这一过程可能需要好几天才能生效，请耐心等待:)</p>

<h2>4.让博客中连接在新窗口打开</h2>

<p>由于markdown不支持这一语法，如果要自己用html标签实现，又有些违背了markdown以内容为重的立意。</p>

<p>参考博文<a href="http://www.blogjava.net/lishunli/archive/2013/01/20/394478.html">《在Octopress中为markdown的超链接加上target="_blank"》</a>，可以通过将如下代码添加到 {OCTOPRESS_HOME}/source/_includes/custom/head.html文件末尾来实现：</p>

<p>``` javascript</p>

<script type="text/javascript">

function addBlankTargetForLinks () {

  $('a[href^="http"]').each(function(){

      $(this).attr('target', '_blank');

  });

}

$(document).bind('DOMNodeInserted', function(event) {

  addBlankTargetForLinks();

});

</script>


<p>```</p>

<h2>5.列表的排版</h2>

<p>默认情况，所有文字的排头会对齐，但如果有列表项的情况下也如此，列表头就会冲出文章的主体区块了。</p>

<p>在octopress/sass/custom/_layout.scss文件中找到#$indented-lists: true行，去掉#注释即可。</p>

<p>```
$indented-lists: true</p>

<p>```</p>

<!--more-->


<h2>6.404ERROR页面</h2>

<p>在ocotopress/source目录下，增加404.markdown，并做出自定义的呃编辑。本博客使用了腾讯公益404，推荐大家使用，为社会贡献一分正能量。<a href="http://www.qq.com/404/">公益404</a></p>

<h2>``` </h2>

<p>layout: page</p>

<p>title: "404 Error"</p>

<p>date: 2013-4-21 02:35</p>

<p>comments: false</p>

<p>sharing: false</p>

<p>footer: false</p>

<hr />

<script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8"></script>


<p>```</p>

<h2>7.在侧边栏增加标签云(tag cloud)</h2>

<p>octopress默认只有分类，没有标签。这对于博文的组织和管理很不友好。有人开源出了自己定制的tag生成和tag cloud展现的代码，可以引入到自己的博客中来。</p>

<p>详细操作参见博文：<a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">《为octopress添加tag Cloud》</a>。不过博文中没有讲解标签云的UI配置参数的使用，为了让UI适应页面，请参考原作者的官方说明:<a href="https://github.com/robbyedwards/octopress-tag-cloud">octopress-tag-cloud</a>。我所实践出的较合理的参数值如下
``` ruby</p>

<h1>注意，下面一行的escape反斜杠在正常使用时需要去掉</h1>

<p>{\% tag_cloud font-size: 70-180%, limit: 15, order: rand, style: para  { &amp;nbsp }\%}
```</p>

<p>如果想将文章分类（category）也放在侧边栏，可以参考这篇博文：<a href="http://paz.am/blog/blog/2012/06/25/octopress-category-list-plugin/">《Octopress - Category List Plug-in》</a></p>

<h2>8.在顶栏增加标签云页面tab</h2>

<p>1.生成新网页
<code>ruby
rake new_page["tag-cloud"] #在octopress/source/中将生成tag-cloud/文件夹
</code></p>

<p>2.在顶栏增加新页面</p>

<p>修改<code>source/_includes/custom/navigation.html</code></p>

<p>```</p>

<ul class="main-navigation">
  <li><a href="/">首页</a></li>
  <li><a href="/blog/categories/tech/">技术</a></li>
  <li><a href="/blog/categories/life/">生活</a></li>
  <li><a href="/blog/categories/book/">读书</a></li>
  <li><a href="/tag-cloud/">标签云</a></li>
  <li><a href="/about">关于</a></li>
</ul>


<p><code>``
在需要的位置增加</code><li><a href="/tag-cloud/">标签云</a></li>`。如此一来，可以在网页顶栏看到『标签云』一栏了。不过此时，点击进入，页面为空。</p>

<p>3.修改标签云页面内容。</p>

<p>修改<code>octopress/source/tag-cloud/index.markdown</code>，增加标签云执行脚本。</p>

<p>```</p>

<hr />

<p>layout: page
title: "标签云"
date: 2013-07-10 02:53
comments: true
sharing: true</p>

<h2>footer: true</h2>

<h1>注意，代码中的escape反斜杠在正常使用时需要去掉</h1>

<h1>另外，这几个语句不能使用换行。在我的测试环境下，使用换行后，最终的页面上对换行进行了错误的解码，给增加了一个<code>标签，造成了错误的显示。</h1>

<ul class="tag-cloud">\{\% tag_cloud font-size: 90-210%, limit: 1000, style: para \%\}</ul>


<p>```</p>

<h2>9.博客末尾增加原文链接、版权等</h2>

<p>最近发现有其他小网站未经授权直接copy我的博客内容，在违章的末尾加上版权、原文链接变得很有必要了。</p>

<p>详情参见博客<a href="http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress/">《为octopress每篇文章添加一个文章信息》</a>。</p>

<p>值得注意的是，插件代码中如下几行需要去掉缩进和换行符。原因跟第8节所讲一样，换行符引起了错误的解码，造成了错误的显示。</p>

<p>``` ruby
post.content + %Q[<p class='post-footer'></p>

<pre><code>        #{pre or "original link:"}
        &lt;a href='#{post.full_url}'&gt;#{post.full_url}&lt;/a&gt;&lt;br/&gt;
        &amp;nbsp;written by &lt;a href='#{url}'&gt;#{author}&lt;/a&gt;
        &amp;nbsp;posted at &lt;a href='#{url}'&gt;#{url}&lt;/a&gt;
        &lt;/p&gt;]
</code></pre>

<p>```
最后，kevin没有提及的是，为了做好美化，还需要增加一段针这块区域的css：</p>

<p>编辑<code>sass/custom/_style.scss</code>，在末尾增加如下内容：</p>

<p><code>css
.post-footer{margin-top:10px;padding:5px;background:none repeat scroll 0pt 0pt #eee;font-size:90%;color:gray}
</code>
这样，原文链接和版权信息就能很好的和正文内容分离开了。</p>

<h2>10.给中英文之间加空格</h2>

<p>参见博文<a href="http://xoyo.name/2012/04/auto-spacing-for-octopress/">《给中英文间加个空格》</a>。</p>

<p>特别注意ruby文件的编码：复制博文中的代码时，需要去掉前几行的描述性注释，让<code>#encoding:UTF-8</code>语句暴露在.rb文件的第一句。否则，<code>rake generate</code>时，会报错无法识别<code>\p{Han}</code>。</p>

<h2>Tips</h2>

<p>既然是个博客站点，就算是web产品啦，可以考虑下SEO。推荐博文<a href="http://codemacro.com/2012/09/06/octopress-seo/">《Octopress中的SEO》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《写给大家看的设计书》]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/06/11/the-non-designers-design-book/"/>
    <updated>2013-06-11T13:58:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/06/11/the-non-designers-design-book</id>
    <content type="html"><![CDATA[<h3>从iOS7的扁平化谈起</h3>

<p>昨晚看了WWDC2013的直播，iOS7以扁平化UI的方式展现在世人面前。于是接下来进入了微博吐槽时间。</p>

<p>大象要跳舞是很难的，这正是苹果面临的情况。现在无论是Android还是Winphone，与iOS系统体验上的差异已经不是难以企及的，甚至有些方面更能为大众接受。于是Ive带领他的团队开始拥抱<strong>Flat Design</strong>。乔布斯子不知道会怎么想，他可是坚持了一辈子的拟物风格。当然，无论乔老爷子怎么想，时势如此，由不得苹果不变。</p>

<p>从微博疯狂的iOS7刷屏中挑出了些有价值的信息，关于扁平化和拟物化的：</p>

<ul>
<li><a href="http://www.zhihu.com/question/20881633">什么是扁平化设计（Flat Design）？扁平化设计是未来的趋势吗？</a></li>
<li><a href="http://www.inside.com.tw/2013/03/25/flat-design">UI 美學趨勢備忘錄─淺析扁平化設計</a></li>
<li><a href="http://www.oschina.net/translate/flat-design-principles">扁平化设计原则</a></li>
</ul>


<p>看完这些已经晕头了。人的思维总是有惰性的，倾向于接受自己头脑中已经有条理的思维结果。不情愿的说，这些略显专业的介绍已经超出了我对设计的思考范畴了，我看到的只是零散的观点，而找不到源头。</p>

<p>于是想起了《写给大家看的设计书》。作为非设计人员，这本书够接地气。一个多月前看完，让自己对设计的认识从一个完全的小白提升为一个略有喜好和观点的小白了。还是先聊这本书吧。</p>

<h2>设计的基本原则</h2>

<p>读这本书之前，在不同平台上看见它的好多推荐了。不过鉴于大多数设计类书都是『手把手教你画马』的效果（详情参见下图），一直不太感冒。</p>

<p><img src="https://dl.dropboxusercontent.com/u/64021093/Pics/307-12110Q62915932.jpg" title="画马" alt="怎样画马" /></p>

<p>后来码代码太烦躁，抱着试一试的态度在多看上下载了下来，一着眼便被吸引住了。书本本身的排版设计就透露着简洁明了的设计感，配色也恰到好处的清新。</p>

<p>全书循序渐进的从设计的四大基本原则讲起，结合丰富的案例分析，延伸到具体的主题设计技巧中。这部分是最让我觉得受益的部分。当然，不仅仅只是这些，还有涉及到颜色的运用、字体的设计等内容，本着『不要在意这些细节』的原则，它们被我匆匆略过。</p>

<p>可以这么夸张的说，设计的『四项基本原则』是我有自主意识以来觉得最受用的『条条框框』：</p>

<h3>原则一：亲密性</h3>

<p>亲密性的根本目的是组织性。还有个副产品，利用亲密性可以使空白更美观。</p>

<ul>
<li>将相关的项组织在一起。</li>
<li>物理位置的接近就意味着存在关联。</li>
</ul>


<h3>原则二：对齐</h3>

<p>对齐的根本目的是使页面统一而有条理。不论创建精美的、正式的、有趣的还是严肃的外观，通常都可以利用一种明确的对齐来达到目的。</p>

<ul>
<li>任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。</li>
<li>对齐的项会形成一个内聚的单元。</li>
<li>居中对齐显得正式、稳重，但一般不要用居中对齐。</li>
<li>一定要坚持页面上只使用一种文本对齐，避免混合使用多种文本对齐。</li>
<li>可以适时的打破规则，但在此之前得清楚什么是规则。</li>
</ul>


<h3>原则三：重复</h3>

<p>重复的根本目的是统一，并增强视觉效果。</p>

<ul>
<li>设计的某些方面需要在整个作品中重复</li>
<li>重复是一种全局的一致性，比如杂志每页的标题都使用同样的字体大小。这有利于信息的组织。</li>
<li>重复也一定程度给作品带来专业性和权威性。</li>
<li>要避免太多的重复，重复太多会让人厌烦。注意对比的价值</li>
</ul>


<h3>原则四：对比</h3>

<p>根本目的有两方面。一个目的是增强页面效果，如果一个页面看起来很有意思，往往更有可读性；另一个目的是有助于信息的组织。</p>

<ul>
<li>如果两项不完全相同，就应当使之不同，而且应当是截然不同。</li>
<li>对比一定要强烈。</li>
</ul>


<h3>应用设计原则</h3>

<p>优秀的设计就这么容易：</p>

<ul>
<li>1.学习4大基本原则;</li>
<li>2.认识到自己没有运用这些原则；</li>
<li>3.应用基本原则。</li>
</ul>


<p>这四个基本设计原则是相互关联的，只应用某一个原则的情况很少。当对应着一个个的举例体验过四条基本原则的威力后，接下来就是在自己身边实践这些原则了。</p>

<p>一方面，可以观察四项原则在现有设计中的应用：比如当前所打开的网页，是否足够清晰、明确的展示了它所要表达的意图；手头的书本，排版是否跟内容在情感上吻合。</p>

<p>另一方面，时常会有些文档、写报告、为展示写slides的需求，自己在创作的过程中，也可以应用起这四条原则，慢慢体会，慢慢修炼。</p>

<h2>体会</h2>

<p>歌德在《浮士德》中提到过这么一句话：『理论是灰色的，生活之树常青』。在我看来，所有的事物都是如此，人性使然。抛开这四条原则本身，它们归结起来都是要实现意图的传递：</p>

<blockquote><p>将信息从设计者准确无误的传递给目标用户</p></blockquote>

<p>设计作为一种原始信息的载体，本身的形式上会带来附加的信息量，如何让这些设计自身的附加量不混淆了核心的原始信息，是设计好坏的根本。更进一步，设计的更高层次应该是让设计的附加量起到正相关的增益效果。《写给大家看的设计书》中的四个原则正是最基础的实践。</p>

<p>现在是信息的时代，信息量的暴增让信息的简洁展示和选择变得越发关键。前文提到的扁平化的设计风格的崛起，就是一个例证:</p>

<p>『扁平化设计具有一种给你让人心醉的美丽，没有大量的修饰，它能以一个简单直白的方式传达一个信息或者帮助一个产品以及思想变得更加深入人心……扁平化设计正是通过放弃任何附加效果的方式，创建一个「零」3D属性的设计方案。在这里，没有阴影效果、斜角、浮雕、渐变等其他方法来帮助元素产生相对于屏幕的凹凸效果。不带有羽化边缘以及阴影效果的图标和UI元素也都看起来非常鲜明。』</p>

<p>相对而言，乔布斯推崇的拟物风格中，所秉承的是让所有用户能快速的学会如何使用它。而随着时代的发展，这种降低学习成本的方式渐渐的不是必须，数码产品充斥着生活，大多数人已经有足够的经验来应对新的操作体验。从这个角度讲，扁平化在现阶段或许是更有好的选择。</p>

<p>不管怎么样，WWDC以后，苹果股价已经持续下跌了，祝福苹果吧，希望Ive不要成为苹果的罪人，据说他是最懂乔布斯的人呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac的GUI哲学]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/06/09/something-about-mac-gui/"/>
    <updated>2013-06-09T01:00:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/06/09/something-about-mac-gui</id>
    <content type="html"><![CDATA[<h2>GUI哲学</h2>

<p>前些日子，看了Tinyfool老师的一篇文章<a href="http://blogread.cn/it/article/1089?f=wb">《开发人员为何应该使用 Mac OS X 兼 OS X 小史》</a>，才恍然Mac系统可不仅仅是UI上与Windows大相径庭，而是自底而上的区别。这种区别渗透到了整个系统框架的设计理念中。</p>

<p>简单概括下我的认识：相比Windows和Linux两大阵营，Mac OS X除了『品味』上的优势之外，最重要的两点是：1.对GUI应用程序脚本化的有力支持；2.能实现GUI程序之间快捷的进程间通信。</p>

<h4>GUI程序之间的进程间通信</h4>

<p>IPC对于多用户分时系统的重要性不言而喻。其中从用户视角来看，如何让多个程序之间能更友好的交互是非常重要的。C++语言虽然面向对象，但在底层来看，其实依旧是冷冰冰的汇编代码，没有更整体的对象环境支撑，而以此构建的Linux也无法对进程间通信形成强力的支持。相比之下，乔布斯的团队借助于SmallTalk的消息传递机制创造了Objective-C，并搭建了自己的运行时和类库框架Cocoa，让系统无论从自身的迭代开发还是应用开发，得到了很大提升。值得一提的是，Objc虽然最近才由于iOS、Mac平台的开发的火热进入热门编程语言的行列，其实它比Java还早十年出生。像最近由于Rails框架而火爆起来的Ruby和持续坚挺的Java，都从SamllTalk中吸收了很多设计理念，就别提C#了。</p>

<h4>GUI应用程序的脚本化</h4>

<p>图形的交互方式确实人性化，但应用程序脚本化控制的方式在一些特定的场景里也可以大大提高生产效率。比如微软Office的VBScript。即使是一般用户，不愿意自己写脚本，脚本化的方式也能让开发人员更方便快捷的开发出新颖的功能和产品。</p>

<p>让应用全部统一开放脚本很难，特别是从市场的层面而言，如果没有一直贯彻这一战略，造成平台很多应用不支持这一功能，则很难推广。苹果九十年代已经开始积累这方面的基础，有先见之明。</p>

<h2>GUI工具</h2>

<p>下面是我接触过的一些Mac下的GUI工具。它们大都散发着对开发者的自由开放的态度:)</p>

<h3>Quicksilver</h3>

<p>『为了不把Mac当Windows用』，可以从<a href="http://qsapp.com/">Quicksilver</a>入手。它能将双手从触摸板中解脱出来，或许这是很多开发者的梦想吧;)。只需用热键激活输入框，输入简单的匹配字符串，就可召唤出某个应用，或者执行某些搜索、查找任务，快哉！</p>

<p>简单说说配置和使用方式：</p>

<ul>
<li>1.安装好后，在preference -> command中可以设置HotKey（唤醒的虚拟按键），我的习惯设置是<code>control+enter</code>。preference -> application可以设置是否需要在dock中显示，以及登入时自动启动。</li>
<li>2.基本功能：快捷打开应用。按下Quicksliver的HotKey（我的是<code>control+enter</code>）,在弹出的输入框中输入所需应用的头几个字母或者缩写，Quicksliver会自动匹配最可能的应用，并显示出来，如果不是自己想要的，可以移动「上下光标」打开下拉菜单选择。选中后回车即可，如图。</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/64021093/Pics/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202013-06-09%20%E4%B8%8B%E5%8D%881.23.22.png" title="Quicksilver示例" alt="Quicksilver" /></p>

<ul>
<li>3.还有很多其他的细节功能，通过Quicksliver的插件实现，可以根据自己的需求来定制。</li>
</ul>


<h3>Shortcat</h3>

<p><a href="http://shortcatapp.com/">shortcat</a>是Mac下的快捷操作利器。相比Quicksilver，Shortcat有不同的定位：通过键盘定位到屏幕上某窗体内的某个位置。其官网的示例就是如何通过Shortcat使用键盘更改DNS设置，注意，是完全不用鼠标噢。有人可能会想那为什么卜直接使用cmd呢？我想答案是Shortcat就是基于GUI的解决方案，是GUI和键盘快捷键的完美组合，与cmd并不冲突。</p>

<p>下面简单的交代下Shortcat的使用方式：</p>

<ul>
<li>1.快捷键<code>Cmd+Shift+Space</code>用来激活输入框。使用关键字的定位方式类似于Quicksilver。比如：如果目的是『Language &amp; Text』，那么输入『lt』、『lang』；『sa』代表show all，显示所能用于文字定位的区域。『.』能展示出所有可控制区域，包括没有文字定位的区域。</li>
<li>2.输入了关键字后，界面中被匹配到的模块会被套上不同颜色的方框。接下来，可以使用<code>control+key</code>重定位到对应位置，其中key为对应的匹配上的模块的字符标识。</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/64021093/Pics/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202013-06-09%20%E4%B8%8B%E5%8D%881.42.39.png" title="Shortcat示例" alt="Shortcat" /></p>

<ul>
<li>3.定位到合适的位置后，按下<code>enter</code>，可执行单击动作；对应的，双击<code>enter</code>为鼠标双击动作；如果需要配合其他按键的点击，比如<code>command+click</code>，执行<code>command+enter</code>即可；鼠标悬浮为<code>control</code>；双击<code>control</code>可实现聚焦。</li>
</ul>


<h3>GeekTool</h3>

<p><a href="http://projects.tynsoe.org/en/geektool/">GeekTool</a>类似于Windows下的widget，可以个性化的定制自己的桌面，添加插件，将CPU、HDD信息直接展示在桌面上，正如其名，Geek而又文艺!如下效果图：</p>

<p><img src="http://bbs.dgtle.com/data/attachment/album/201111/10/011505943pmpmm68enxwwd.png" title="GeekTool示例桌面" alt="GeekTool" /></p>

<p>详细配置可参考这篇文章<a href="http://www.dgtle.com/article-797-1.html">《教你装小清新—— Geektool &amp;&amp; Rainmeter 桌面皮肤推荐》</a></p>

<h3>Nocturne</h3>

<p><a href="http://code.google.com/p/blacktree-nocturne/downloads/detail?name=Nocturne.2.0.0.zip">Nocturne</a>这是桌面颜色控制的工具，与Quicksilver同为blacktree公司的产品。</p>

<p>使用方式：下载Nocturne2.0.0，解压后拖入应用程序文件夹，打开。在preference中可很直观的配置各项属性。其中，switch to night功能可以将Mac界面切换到黑夜模式，很好玩;)。</p>

<h3>参考：</h3>

<ul>
<li><a href="http://ksmx.me/blog/2012/03/18/customize-mac-desktop/">矮矬穷Mac桌面美化得瑟教程</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
